version: '3.9'

services:
  mongodb-nodo1:
    container_name: mongodb-nodo1
    image: mongo
    volumes:
      - ./mongors/data1:/data/db
      - ./rs-init.js:/scripts/rs-init.js
      - ./init.js:/scripts/init.js
    networks:
      - mongors-network
    cpus: "0.5"
    mem_limit: 450m
    ports:
      - 27021:27017
    restart: always
    command: mongod --bind_ip_all --replSet "dbrs"
    depends_on:
      - mongodb-nodo3
      - mongodb-nodo2
    links:
      - mongodb-nodo3
      - mongodb-nodo2

  mongodb-nodo2:
    container_name: mongodb-nodo2
    image: mongo
    volumes:
      - ./mongors/data2:/data/db
    networks:
      - mongors-network
    cpus: "0.5"
    mem_limit: 450m
    ports:
      - 27022:27017
    restart: always
    command: mongod --bind_ip_all --replSet "dbrs"

  mongodb-nodo3:
    container_name: mongodb-nodo3
    image: mongo
    volumes:
      - ./mongors/data3:/data/db
    networks:
      - mongors-network
    cpus: "0.5"
    mem_limit: 450m
    ports:
      - 27023:27017
    restart: always
    command: mongod --bind_ip_all --replSet "dbrs"

  web:
    env_file:
      - .env
    container_name: ${WEB_HOSTETL}
    hostname: ${WEB_HOSTETL}
    build:
      context: ./app
      dockerfile: Dockerfile
    entrypoint:
      - flask
      - run
      - --host=0.0.0.0
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./app.py
      FLASK_RUN_HOST: 0.0.0.0
      TEMPLATES_AUTO_RELOAD: 'True'
      FLASK_ENV: development
    ports: 
      - '8000:5000'
    volumes:
      - ./app:/app
    networks:
      - mongors-network
    depends_on:
      - mongodb-nodo1
      - mongodb-nodo2
      - mongodb-nodo3

networks:
  mongors-network:
    driver: bridge
